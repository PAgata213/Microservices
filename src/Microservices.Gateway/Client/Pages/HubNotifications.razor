@page "/hubnotifications"
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager

<h3>HubNotifications</h3>

<div class="form-group">
	<label>
		User:
		<input @bind="_userInput" />
	</label>
</div>
<div class="form-group">
	<label>
		Message:
		<input @bind="_messageInput" size="50" />
	</label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
ConnectionId : @(_hubConnection?.ConnectionId)
<hr>

<ul id="messagesList">
	@foreach(var message in _messages)
	{
		<li>@message</li>
	}
</ul>

@code {
	private List<string> _messages = new();
	private HubConnection? _hubConnection;
	private string? _userInput;
	private string? _messageInput;

	protected override async Task OnInitializedAsync()
	{
		_hubConnection = new HubConnectionBuilder()
			.WithUrl(new Uri("http://127.0.0.1:5400/chathub"),
			x =>
			{
				x.SkipNegotiation = true;
				x.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
				x.HttpMessageHandlerFactory = _ => new HttpClientHandler
				{
					ClientCertificateOptions = ClientCertificateOption.Manual,
					ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) => { return true; }
				};
			})
			.Build();

		_hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
		{
			var encodedMsg = $"{user}: {message}";
			_messages.Add(encodedMsg);
			StateHasChanged();
		});

		await _hubConnection.StartAsync();
	}

	private async Task Send()
	{
		if(_hubConnection is not null)
		{
			await _hubConnection.SendAsync("SendMessage", _userInput, _messageInput);
		}
	}

	public bool IsConnected =>
			_hubConnection?.State == HubConnectionState.Connected;

	public async ValueTask DisposeAsync()
	{
		if(_hubConnection is not null)
		{
			await _hubConnection.DisposeAsync();
		}
	}
}
